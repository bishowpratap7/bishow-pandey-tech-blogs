{"id":277,"date":"2023-06-19T15:01:59","date_gmt":"2023-06-19T15:01:59","guid":{"rendered":"https:\/\/javapan.com\/?p=277"},"modified":"2024-02-10T16:05:16","modified_gmt":"2024-02-10T16:05:16","slug":"over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot","status":"publish","type":"post","link":"https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/","title":{"rendered":"What are over 50 things to avoid from Tomcat layer to improve performance in SpringBoot?"},"content":{"rendered":"\n<p>By following these best practices, you can effectively initialize and configure Tomcat with Spring Boot for running your application.<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Use the Spring Boot Maven Plugin: Include the <code>spring-boot-maven-plugin<\/code> in your Maven <code>pom.xml<\/code> file to package your application as an executable JAR or WAR file. This plugin automatically sets up an embedded Tomcat server for running your Spring Boot application.<\/li>\n<\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;!-- Spring Boot Maven Plugin --&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\n            &lt;artifactId&gt;spring-boot-maven-plugin&lt;\/artifactId&gt;\n            &lt;version&gt;2.5.2&lt;\/version&gt;\n            &lt;executions&gt;\n                &lt;execution&gt;\n                    &lt;goals&gt;\n                        &lt;goal&gt;repackage&lt;\/goal&gt;\n                    &lt;\/goals&gt;\n                &lt;\/execution&gt;\n            &lt;\/executions&gt;\n        &lt;\/plugin&gt;\n    &lt;\/plugins&gt;\n&lt;\/build&gt;\n<\/code><\/pre>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Configure Tomcat port: By default, Spring Boot uses port 8080 for Tomcat. You can configure the port by setting the <code>server.port<\/code> property in your application&#8217;s <code>application.properties<\/code> or <code>application.yml<\/code> file.<\/li>\n<\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">application.properties:\nOpen the src\/main\/resources\/application.properties file and add the following line:\n\n\nserver.port=8080\nReplace 8080 with the desired port number.\n\napplication.yml:\nOpen the src\/main\/resources\/application.yml file and add the following lines:\n\n\nserver:\n  port: 8080<\/code><\/pre>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Optimize Tomcat for production: Configure Tomcat for optimal performance in production environments. Set appropriate values for connector threads, connection timeouts, and other parameters based on your application&#8217;s requirements.<\/li>\n<\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">&lt;Connector compression=\"on\" compressionMinSize=\"2048\"\n           compressableMimeType=\"text\/html,text\/xml,text\/plain,text\/css,text\/javascript,application\/javascript,application\/json\" \/&gt;\n<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">&lt;Connector ...&gt;\n    ...\n    &lt;Executor name=\"tomcatThreadPool\" namePrefix=\"catalina-exec-\"\n              maxThreads=\"500\" minSpareThreads=\"25\"\/&gt;\n    &lt;Connector executor=\"tomcatThreadPool\" ... \/&gt;\n    ...\n&lt;\/Connector&gt;\n<\/code><\/pre>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Use Tomcat as a dependency: Instead of using the embedded Tomcat provided by Spring Boot, you can also package your application as a WAR and deploy it to an external Tomcat server. In this case, include Tomcat as a provided dependency in your project.<\/li>\n<\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.tomcat&lt;\/groupId&gt;\n    &lt;artifactId&gt;tomcat-embed-core&lt;\/artifactId&gt;\n    &lt;version&gt;9.0.50&lt;\/version&gt;\n&lt;\/dependency&gt;\n<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import org.springframework.boot.builder.SpringApplicationBuilder;\nimport org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n\npublic class ServletInitializer extends SpringBootServletInitializer {\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n        return application.sources(YourApplication.class);\n    }\n}\n<\/code><\/pre>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Enable SSL\/TLS: Secure your application by enabling SSL\/TLS encryption. Configure Tomcat to use HTTPS by providing an SSL certificate and configuring the appropriate properties in your application configuration.<\/li>\n<\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import org.apache.catalina.connector.Connector;\nimport org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class TomcatConfiguration {\n\n    @Bean\n    public TomcatServletWebServerFactory tomcatServletWebServerFactory() {\n        TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory();\n        factory.addAdditionalTomcatConnectors(createSslConnector());\n        return factory;\n    }\n\n    private Connector createSslConnector() {\n        Connector connector = new Connector();\n        connector.setPort(8443);\n        connector.setSecure(true);\n        connector.setScheme(\"https\");\n        connector.setAttribute(\"keyAlias\", \"your_key_alias\");\n        connector.setAttribute(\"keystorePass\", \"your_keystore_password\");\n        connector.setAttribute(\"keystoreFile\", \"\/path\/to\/your_keystore_file\");\n        connector.setAttribute(\"clientAuth\", \"false\");\n        connector.setAttribute(\"sslProtocol\", \"TLS\");\n        return connector;\n    }\n}\n<\/code><\/pre>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Customize Tomcat server settings: If you need to customize Tomcat server settings, you can create a <code>TomcatServletWebServerFactory<\/code> bean in your Spring Boot configuration. This allows you to fine-tune Tomcat&#8217;s behavior, such as setting additional connectors, configuring HTTP\/2, etc.<\/li>\n<\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import org.apache.catalina.connector.Connector;\nimport org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class TomcatConfiguration {\n\n    @Bean\n    public TomcatServletWebServerFactory tomcatServletWebServerFactory() {\n        TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory();\n        factory.addAdditionalTomcatConnectors(createHttpConnector());\n        return factory;\n    }\n\n    private Connector createHttpConnector() {\n        Connector connector = new Connector(\"org.apache.coyote.http11.Http11NioProtocol\");\n        \/\/ Configure the connector properties (e.g., port, max connections, etc.)\n        connector.setPort(8080);\n        \/\/ Add any additional configuration as needed\n        return connector;\n    }\n}\n<\/code><\/pre>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Externalize configuration: Externalize your configuration using environment variables, command-line arguments, or external configuration files. This allows you to modify Tomcat and Spring Boot settings without rebuilding your application.<\/li>\n\n\n\n<li>Implement graceful shutdown: Implement graceful shutdown of your Spring Boot application running on Tomcat. Configure the <code>spring.lifecycle.timeout-per-shutdown-phase<\/code> property to allow sufficient time for existing requests to complete during shutdown.<\/li>\n\n\n\n<li>Monitor and tune Tomcat: Monitor the performance and health of your Tomcat server using appropriate monitoring tools. Identify bottlenecks and tune Tomcat&#8217;s configuration accordingly to ensure optimal performance.<\/li>\n\n\n\n<li>Keep Tomcat up to date: Regularly update your Tomcat server to the latest stable version. This ensures that you have the latest bug fixes, security patches, and performance improvements.<\/li>\n\n\n\n<li>Avoid unnecessary session usage: Minimize the usage of HTTP sessions unless absolutely necessary. Sessions consume server resources, and excessive session usage can impact performance. Consider using stateless authentication mechanisms like JWT instead.<\/li>\n\n\n\n<li>Avoid excessive logging: Logging can significantly impact performance. Be cautious about the amount and level of detail in your log statements. Use logging frameworks with appropriate log levels and avoid excessive debug or trace logging in production environments.<\/li>\n\n\n\n<li>Avoid unnecessary JSP usage: If possible, avoid using JavaServer Pages (JSP) as they can have performance implications. Consider using more efficient templating engines like Thymeleaf or FreeMarker.<\/li>\n\n\n\n<li>Avoid blocking operations: Be cautious of blocking operations like long-running database queries or external API calls within request handling threads. Consider using asynchronous and non-blocking techniques to offload such operations to separate threads or use reactive frameworks like Spring WebFlux.<\/li>\n\n\n\n<li>Avoid excessive file uploads: If your application allows file uploads, ensure that you have appropriate size limits and validation mechanisms in place. Large file uploads can consume server resources and impact performance.<\/li>\n\n\n\n<li>Avoid unnecessary use of filters: Filters can add overhead to request processing. Evaluate the necessity of each filter and ensure they are only applied when required. Remove any unused or redundant filters.<\/li>\n\n\n\n<li>Avoid unnecessary use of interceptors: Similarly to filters, interceptors can introduce additional processing overhead. Evaluate the necessity of each interceptor and ensure they are used judiciously.<\/li>\n\n\n\n<li>Avoid unnecessary use of servlet listeners: Servlet listeners can have a performance impact as they are invoked for various events in the servlet lifecycle. Use them sparingly and only when necessary.<\/li>\n\n\n\n<li>Avoid misconfigured connection pools: If you&#8217;re using a connection pool, ensure it is properly configured with appropriate connection pool size, idle connection timeout, and validation settings. A misconfigured connection pool can result in poor performance and resource utilization.<\/li>\n\n\n\n<li>Avoid excessive resource loading: Be cautious about loading resources (e.g., static files, configurations) from the file system instead of using classpath resources. Loading resources from the file system can be slower and impact performance. Prefer classpath resources whenever possible.<\/li>\n\n\n\n<li>Avoid unnecessary session usage: Minimize the usage of HTTP sessions unless absolutely necessary. Sessions consume server resources, and excessive session usage can impact performance.<\/li>\n\n\n\n<li>Avoid excessive logging: Logging can significantly impact performance. Be cautious about the amount and level of detail in your log statements.<\/li>\n\n\n\n<li>Avoid unnecessary JSP usage: If possible, avoid using JavaServer Pages (JSP) as they can have performance implications.<\/li>\n\n\n\n<li>Avoid blocking operations: Be cautious of blocking operations like long-running database queries or external API calls within request handling threads. Use asynchronous and non-blocking techniques to offload such operations to separate threads.<\/li>\n\n\n\n<li>Avoid excessive file uploads: Ensure that you have appropriate size limits and validation mechanisms in place for file uploads.<\/li>\n\n\n\n<li>Avoid unnecessary use of filters: Evaluate the necessity of each filter and ensure they are only applied when required.<\/li>\n\n\n\n<li>Avoid unnecessary use of interceptors: Evaluate the necessity of each interceptor and use them sparingly.<\/li>\n\n\n\n<li>Avoid unnecessary use of servlet listeners: Use servlet listeners judiciously as they can have a performance impact.<\/li>\n\n\n\n<li>Avoid misconfigured connection pools: Ensure that your connection pool is properly configured with appropriate size, idle connection timeout, and validation settings.<\/li>\n\n\n\n<li>Avoid excessive resource loading from the file system: Prefer loading resources (e.g., static files, configurations) from the classpath instead of the file system.<\/li>\n\n\n\n<li>Avoid unnecessary use of context reloads: Minimize the frequency of context reloads as they can result in downtime and performance degradation.<\/li>\n\n\n\n<li>Avoid excessive cookie usage: Use cookies judiciously as they can increase the size of HTTP requests and responses.<\/li>\n\n\n\n<li>Avoid unnecessary URL rewriting: Evaluate the need for URL rewriting and use it only when necessary.<\/li>\n\n\n\n<li>Avoid unnecessary session replication: If you are using session replication in a clustered environment, evaluate the need for it and consider alternatives like session affinity.<\/li>\n\n\n\n<li>Avoid unnecessary use of blocking IO: Prefer non-blocking IO to improve the scalability and responsiveness of your application.<\/li>\n\n\n\n<li>Avoid excessive use of HTTP redirection: Minimize the number of HTTP redirects as they add overhead to request processing.<\/li>\n\n\n\n<li>Avoid unnecessary use of default error pages: Customize error pages to provide more meaningful information and avoid unnecessary processing.<\/li>\n\n\n\n<li>Avoid unnecessary use of compression: Evaluate the need for compression and ensure that it is configured appropriately to balance CPU usage and bandwidth savings.<\/li>\n\n\n\n<li>Avoid excessive use of URL rewriting: Evaluate the necessity of URL rewriting and minimize its usage if possible.<\/li>\n\n\n\n<li>Avoid unnecessary use of resource-consuming features: Disable any Tomcat features or modules that are not required for your application to conserve resources.<\/li>\n\n\n\n<li>Avoid unnecessary use of default servlet mappings: Customize servlet mappings to avoid unnecessary processing of requests.<\/li>\n\n\n\n<li>Avoid excessive use of wildcard mappings: Use specific servlet mappings instead of wildcards to improve request resolution efficiency.<\/li>\n\n\n\n<li>Avoid unnecessary use of default error handling: Customize error handling to provide more informative and efficient error responses.<\/li>\n\n\n\n<li>Avoid excessive use of request attributes: Minimize the usage of request attributes as they can impact performance, especially when used with filters or interceptors.<\/li>\n\n\n\n<li>Avoid unnecessary use of Tomcat valves: Evaluate the necessity of Tomcat valves and use them only when required.<\/li>\n\n\n\n<li>Avoid unnecessary use of session listeners: Use session listeners judiciously as they can introduce overhead.<\/li>\n\n\n\n<li>Avoid unnecessary use of Tomcat&#8217;s SSI (Server Side Includes) feature: Evaluate the need for SSI and consider alternative solutions if possible.<\/li>\n\n\n\n<li>Avoid excessive use of static content: Serve static content efficiently using caching mechanisms, content delivery networks (CDNs), or reverse proxies.<\/li>\n\n\n\n<li>Avoid unnecessary use of Tomcat&#8217;s default welcome files: Customize welcome files to avoid unnecessary processing.<\/li>\n\n\n\n<li>Avoid excessive use of HTTP headers: Minimize the number and size of HTTP headers to reduce network overhead.<\/li>\n\n\n\n<li>Avoid unnecessary use of session replication: Evaluate the need for session replication and consider alternatives like session clustering or shared session stores.<\/li>\n\n\n\n<li>Avoid unnecessary use of Tomcat&#8217;s request dispatcher: Minimize the usage of the request dispatcher as it involves additional processing.<\/li>\n\n\n\n<li>Avoid unnecessary use of Tomcat&#8217;s virtual hosts: Evaluate the need for virtual hosts and use them judiciously.<\/li>\n\n\n\n<li>Avoid excessive use of session attributes: Minimize the usage of session attributes as they can consume memory and impact performance.<\/li>\n\n\n\n<li>Avoid unnecessary use of Tomcat&#8217;s access logs: Evaluate the necessity of access logs and disable them if not required.<\/li>\n\n\n\n<li>Avoid excessive use of Tomcat&#8217;s cache-related headers: Use cache-related headers appropriately to balance caching and freshness of resources.<\/li>\n\n\n\n<li>Avoid unnecessary use of Tomcat&#8217;s SSL renegotiation: Evaluate the need for SSL renegotiation and disable it if not required.<\/li>\n\n\n\n<li>Avoid excessive use of Tomcat&#8217;s memory settings: Tune Tomcat&#8217;s memory settings appropriately based on your application&#8217;s requirements and resource availability.<\/li>\n\n\n\n<li>Avoid unnecessary use of Tomcat&#8217;s default servlet: Customize the default servlet to handle requests efficiently.<\/li>\n\n\n\n<li>Avoid excessive use of Tomcat&#8217;s default thread pool: Configure the Tomcat thread pool size appropriately to handle the expected workload.<\/li>\n\n\n\n<li>Avoid unnecessary use of Tomcat&#8217;s resource caching: Evaluate the need for resource caching and use it judiciously.<\/li>\n\n\n\n<li>Avoid excessive use of Tomcat&#8217;s default session timeout: Configure the session timeout appropriately based on your application&#8217;s requirements.<\/li>\n\n\n\n<li>Avoid unnecessary use of Tomcat&#8217;s compression settings: Configure compression settings appropriately to balance performance and resource usage.<\/li>\n\n\n\n<li>Avoid excessive use of Tomcat&#8217;s default MIME mappings: Customize MIME mappings to avoid unnecessary processing.<\/li>\n\n\n\n<li>Avoid unnecessary use of Tomcat&#8217;s default character encoding: Configure the character encoding appropriately based on your application&#8217;s requirements.<\/li>\n\n\n\n<li>Avoid excessive use of Tomcat&#8217;s default request parsing settings: Configure request parsing settings appropriately to handle the expected request sizes and payloads.<\/li>\n<\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import org.apache.catalina.connector.Connector;\nimport org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class TomcatConfiguration {\n\n    @Bean\n    public TomcatServletWebServerFactory tomcatServletWebServerFactory() {\n        TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory();\n        factory.addConnectorCustomizers(this::customizeConnector);\n        return factory;\n    }\n\n    private void customizeConnector(Connector connector) {\n        connector.setParseBodyMethods(\"POST,PUT\"); \/\/ Limit parsing to specific HTTP methods\n        connector.setMaxPostSize(1048576); \/\/ Set maximum request body size (in bytes)\n        connector.setMaxSwallowSize(1048576); \/\/ Set maximum size of swallowed request body (in bytes)\n        \/\/ Add any additional customizations as needed\n    }\n}\n<\/code><\/pre>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Avoid unnecessary use of Tomcat&#8217;s default response buffering: Customize response buffering settings to avoid unnecessary memory usage.<\/li>\n<\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import org.apache.catalina.connector.Connector;\nimport org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class TomcatConfiguration {\n\n    @Bean\n    public TomcatServletWebServerFactory tomcatServletWebServerFactory() {\n        TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory();\n        factory.addConnectorCustomizers(this::customizeConnector);\n        return factory;\n    }\n\n    private void customizeConnector(Connector connector) {\n        connector.setAllowChunking(false); \/\/ Disable chunked transfer encoding\n        connector.setBufferRequestBody(false); \/\/ Disable request body buffering\n        \/\/ Add any additional customizations as needed\n    }\n}\n<\/code><\/pre>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Avoid excessive use of Tomcat&#8217;s default thread stack size: Configure the thread stack size appropriately based on your application&#8217;s requirements.<\/li>\n<\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import org.apache.catalina.connector.Connector;\nimport org.apache.coyote.http11.Http11NioProtocol;\nimport org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class TomcatConfiguration {\n\n    @Bean\n    public TomcatServletWebServerFactory tomcatServletWebServerFactory() {\n        TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory();\n        factory.addConnectorCustomizers(connector -&gt; customizeConnector(connector));\n        return factory;\n    }\n\n    private void customizeConnector(Connector connector) {\n        Http11NioProtocol protocol = (Http11NioProtocol) connector.getProtocolHandler();\n        protocol.setThreadStackSize(256); \/\/ Set the desired stack size in kilobytes\n    }\n}\n<\/code><\/pre>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Avoid unnecessary use of Tomcat&#8217;s default request size limits: Configure request size limits appropriately based on your application&#8217;s requirements.<\/li>\n\n\n\n<li>Avoid excessive use of Tomcat&#8217;s default connection timeout: Configure connection timeout appropriately based on your application&#8217;s requirements.<\/li>\n<\/ul>\n\n\n\n<p>By avoiding these performance pitfalls at the Tomcat layer, you can significantly improve the performance of your Spring Boot application. Keep in mind that the specific optimizations required may vary based on your application&#8217;s characteristics and requirements.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>By following these best practices, you can effectively initialize and configure Tomcat with Spring Boot for running your application. By avoiding these performance pitfalls at the Tomcat layer, you can significantly improve the performance of your Spring Boot application. Keep in mind that the specific optimizations required may vary based on your application&#8217;s characteristics and [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":278,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"_coblocks_attr":"","_coblocks_dimensions":"","_coblocks_responsive_height":"","_coblocks_accordion_ie_support":"","footnotes":""},"categories":[],"tags":[17,14,8],"class_list":["post-277","post","type-post","status-publish","format-standard","has-post-thumbnail","hentry","tag-performance","tag-springboot","tag-tomcat"],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v23.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>What are over 50 things to avoid from Tomcat layer to improve performance in SpringBoot? - JAVAPAN - Unlock Your Brilliance, Share Your Knowledge! \ud83d\ude80 Post Your Articles For Free.<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"What are over 50 things to avoid from Tomcat layer to improve performance in SpringBoot? - JAVAPAN - Unlock Your Brilliance, Share Your Knowledge! \ud83d\ude80 Post Your Articles For Free.\" \/>\n<meta property=\"og:description\" content=\"By following these best practices, you can effectively initialize and configure Tomcat with Spring Boot for running your application. By avoiding these performance pitfalls at the Tomcat layer, you can significantly improve the performance of your Spring Boot application. Keep in mind that the specific optimizations required may vary based on your application&#8217;s characteristics and [&hellip;]\" \/>\n<meta property=\"og:url\" content=\"https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/\" \/>\n<meta property=\"og:site_name\" content=\"JAVAPAN - Unlock Your Brilliance, Share Your Knowledge! \ud83d\ude80 Post Your Articles For Free.\" \/>\n<meta property=\"article:published_time\" content=\"2023-06-19T15:01:59+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2024-02-10T16:05:16+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/javapan.com\/wp-content\/uploads\/2023\/06\/Screenshot-2023-06-19-110255.png\" \/>\n\t<meta property=\"og:image:width\" content=\"741\" \/>\n\t<meta property=\"og:image:height\" content=\"472\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"author\" content=\"Bishow Pandey\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Bishow Pandey\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"8 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/\",\"url\":\"https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/\",\"name\":\"What are over 50 things to avoid from Tomcat layer to improve performance in SpringBoot? - JAVAPAN - Unlock Your Brilliance, Share Your Knowledge! \ud83d\ude80 Post Your Articles For Free.\",\"isPartOf\":{\"@id\":\"https:\/\/javapan.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/javapan.com\/wp-content\/uploads\/2023\/06\/Screenshot-2023-06-19-110255.png\",\"datePublished\":\"2023-06-19T15:01:59+00:00\",\"dateModified\":\"2024-02-10T16:05:16+00:00\",\"author\":{\"@id\":\"https:\/\/javapan.com\/#\/schema\/person\/a77752ba68fc33df883be2ffb8e8285a\"},\"breadcrumb\":{\"@id\":\"https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/#primaryimage\",\"url\":\"https:\/\/javapan.com\/wp-content\/uploads\/2023\/06\/Screenshot-2023-06-19-110255.png\",\"contentUrl\":\"https:\/\/javapan.com\/wp-content\/uploads\/2023\/06\/Screenshot-2023-06-19-110255.png\",\"width\":741,\"height\":472},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/javapan.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"What are over 50 things to avoid from Tomcat layer to improve performance in SpringBoot?\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/javapan.com\/#website\",\"url\":\"https:\/\/javapan.com\/\",\"name\":\"JAVAPAN - Unlock Your Brilliance, Share Your Knowledge! \ud83d\ude80 Post Your Articles For Free.\",\"description\":\"Solving Technology Challenges\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/javapan.com\/?s={search_term_string}\"},\"query-input\":{\"@type\":\"PropertyValueSpecification\",\"valueRequired\":true,\"valueName\":\"search_term_string\"}}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/javapan.com\/#\/schema\/person\/a77752ba68fc33df883be2ffb8e8285a\",\"name\":\"Bishow Pandey\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/javapan.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/2ee0db8821f0777e76adf2f4d0c20bb1?s=96&d=wavatar&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/2ee0db8821f0777e76adf2f4d0c20bb1?s=96&d=wavatar&r=g\",\"caption\":\"Bishow Pandey\"},\"sameAs\":[\"https:\/\/javapan.com\"],\"url\":\"https:\/\/javapan.com\/author\/bishowpratap7\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"What are over 50 things to avoid from Tomcat layer to improve performance in SpringBoot? - JAVAPAN - Unlock Your Brilliance, Share Your Knowledge! \ud83d\ude80 Post Your Articles For Free.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/","og_locale":"en_US","og_type":"article","og_title":"What are over 50 things to avoid from Tomcat layer to improve performance in SpringBoot? - JAVAPAN - Unlock Your Brilliance, Share Your Knowledge! \ud83d\ude80 Post Your Articles For Free.","og_description":"By following these best practices, you can effectively initialize and configure Tomcat with Spring Boot for running your application. By avoiding these performance pitfalls at the Tomcat layer, you can significantly improve the performance of your Spring Boot application. Keep in mind that the specific optimizations required may vary based on your application&#8217;s characteristics and [&hellip;]","og_url":"https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/","og_site_name":"JAVAPAN - Unlock Your Brilliance, Share Your Knowledge! \ud83d\ude80 Post Your Articles For Free.","article_published_time":"2023-06-19T15:01:59+00:00","article_modified_time":"2024-02-10T16:05:16+00:00","og_image":[{"width":741,"height":472,"url":"https:\/\/javapan.com\/wp-content\/uploads\/2023\/06\/Screenshot-2023-06-19-110255.png","type":"image\/png"}],"author":"Bishow Pandey","twitter_card":"summary_large_image","twitter_misc":{"Written by":"Bishow Pandey","Est. reading time":"8 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/","url":"https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/","name":"What are over 50 things to avoid from Tomcat layer to improve performance in SpringBoot? - JAVAPAN - Unlock Your Brilliance, Share Your Knowledge! \ud83d\ude80 Post Your Articles For Free.","isPartOf":{"@id":"https:\/\/javapan.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/#primaryimage"},"image":{"@id":"https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/#primaryimage"},"thumbnailUrl":"https:\/\/javapan.com\/wp-content\/uploads\/2023\/06\/Screenshot-2023-06-19-110255.png","datePublished":"2023-06-19T15:01:59+00:00","dateModified":"2024-02-10T16:05:16+00:00","author":{"@id":"https:\/\/javapan.com\/#\/schema\/person\/a77752ba68fc33df883be2ffb8e8285a"},"breadcrumb":{"@id":"https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/#primaryimage","url":"https:\/\/javapan.com\/wp-content\/uploads\/2023\/06\/Screenshot-2023-06-19-110255.png","contentUrl":"https:\/\/javapan.com\/wp-content\/uploads\/2023\/06\/Screenshot-2023-06-19-110255.png","width":741,"height":472},{"@type":"BreadcrumbList","@id":"https:\/\/javapan.com\/over-50-things-to-avoid-from-tomcat-layer-to-improve-performance-in-springboot\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/javapan.com\/"},{"@type":"ListItem","position":2,"name":"What are over 50 things to avoid from Tomcat layer to improve performance in SpringBoot?"}]},{"@type":"WebSite","@id":"https:\/\/javapan.com\/#website","url":"https:\/\/javapan.com\/","name":"JAVAPAN - Unlock Your Brilliance, Share Your Knowledge! \ud83d\ude80 Post Your Articles For Free.","description":"Solving Technology Challenges","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/javapan.com\/?s={search_term_string}"},"query-input":{"@type":"PropertyValueSpecification","valueRequired":true,"valueName":"search_term_string"}}],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/javapan.com\/#\/schema\/person\/a77752ba68fc33df883be2ffb8e8285a","name":"Bishow Pandey","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/javapan.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/2ee0db8821f0777e76adf2f4d0c20bb1?s=96&d=wavatar&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/2ee0db8821f0777e76adf2f4d0c20bb1?s=96&d=wavatar&r=g","caption":"Bishow Pandey"},"sameAs":["https:\/\/javapan.com"],"url":"https:\/\/javapan.com\/author\/bishowpratap7\/"}]}},"_links":{"self":[{"href":"https:\/\/javapan.com\/wp-json\/wp\/v2\/posts\/277"}],"collection":[{"href":"https:\/\/javapan.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/javapan.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/javapan.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/javapan.com\/wp-json\/wp\/v2\/comments?post=277"}],"version-history":[{"count":12,"href":"https:\/\/javapan.com\/wp-json\/wp\/v2\/posts\/277\/revisions"}],"predecessor-version":[{"id":481,"href":"https:\/\/javapan.com\/wp-json\/wp\/v2\/posts\/277\/revisions\/481"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/javapan.com\/wp-json\/wp\/v2\/media\/278"}],"wp:attachment":[{"href":"https:\/\/javapan.com\/wp-json\/wp\/v2\/media?parent=277"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/javapan.com\/wp-json\/wp\/v2\/categories?post=277"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/javapan.com\/wp-json\/wp\/v2\/tags?post=277"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}